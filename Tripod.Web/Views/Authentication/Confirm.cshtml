@using Tripod
@using Tripod.Domain.Security
@using Tripod.Web.Controllers
@model VerifyConfirmEmailSecret

@{
    ViewBag.Title = "Confirm your Email Address";
}

@section styles
{
    <style>
        /* https://github.com/twbs/bootstrap/issues/1982 http://jsfiddle.net/H7J94/5/ */

        .wizard {
            padding: 0;
            margin: 0;
        }

            .wizard .step {
                padding: 10px 12px;
                margin-right: 5px;
                background-color: #5bc0de;
                color: #fff;
                position: relative;
                display: inline-block;
                margin-bottom: 4px;
            }

                .wizard .step:before {
                    width: 0;
                    height: 0;
                    border-top: 20px inset transparent;
                    border-bottom: 20px inset transparent;
                    border-left: 20px solid #fff;
                    position: absolute;
                    content: "";
                    top: 0;
                    left: 0;
                }

                .wizard .step:after {
                    width: 0;
                    height: 0;
                    border-top: 20px inset transparent;
                    border-bottom: 20px inset transparent;
                    border-left: 20px solid #5bc0de;
                    position: absolute;
                    content: "";
                    top: 0;
                    right: -20px;
                    z-index: 2;
                }

                .wizard .step .badge {
                    margin: 0 5px 0 18px;
                    position: relative;
                    top: -1px;
                    color: #5bc0de;
                    background-color: #fff;
                }

            .wizard .current.step {
                background: #007ACC;
                color: #fff;
            }

                .wizard .current.step:after {
                    border-left-color: #007ACC;
                }

                .wizard .current.step .badge {
                    background-color: #fff;
                    color: #007ACC;
                }

            .wizard .success.step {
                background: #468847;
                color: #dff0d8;
            }

                .wizard .success.step:after {
                    border-left-color: #468847;
                }

                .wizard .success.step .badge {
                    background-color: #dff0d8;
                    color: #468847;
                }

            .wizard .completed.step {
                text-decoration: line-through;
            }
    </style>
}

<h2>
    Sign Up  &raquo;
    <small>Confirm your email address.</small>
</h2>
<hr class="hr-sm hr-space" />

<ul class="wizard">
    <li class="success step completed">
        <span class="badge">1</span> Submit email address
    </li>
    <li class="current step">
        <span class="badge">2</span> Confirm email address
    </li>
    <li class="step">
        <span class="badge">3</span> Create password
    </li>
    <li class="step">
        <span class="badge">4</span> ???
    </li>
    <li class="step">
        <span class="badge">5</span> Profit
    </li>
</ul>
<hr class="hr-space hr-md" />
<p>
    An email has been sent to
    @if (ViewBag.EmailAddress != null)
    {
        <strong>@ViewBag.EmailAddress</strong><text>.</text>
    }
    else
    {
        <text>the address you entered on the previous page.</text>
    }
    You have two options for confirming it.
</p>
<ul class="no-indent">
    <li>
        <p>
            In the email you were sent, there is a 10 to 12 character secret code. Paste it into the box below and click the button to proceed.
        </p>
        <p>
            <strong>or</strong>
        </p>
    </li>
    <li>
        Click the hyperlink in the email to skip this step. However, clicking it will open a different tab than this one.<br />
        If you choose this option, you can come back and close this tab after you create your password and successfully sign in.
    </li>
</ul>

<hr class="hr-space hr-md" />

<form role="form"
      method="POST"
      action="@Url.Action(MVC.EmailAddresses.Confirm((string)ViewBag.Ticket, null as VerifyConfirmEmailSecret))"
      novalidate
      name="confirmForm"
      form-contrib="confirmCtrb"
      form-submitted="@IsPost"
      class="form-horizontal">

    @Html.AntiForgeryToken()
    <input type="hidden" name="@Html.NameFor(x => x.Ticket)" value="@ViewBag.Ticket" />

    @Html.ValidationSummary(true)
    @{
        const string inputCss = "input-lg";
        const string inputGroupCss = "input-group input-group-lg";
    }

    @* EMAIL ADDRESS INPUT *@
    <div class="form-group form-group-lg @Html.BootstrapValidationCssClassFor(x => x.Secret)"
         remove-class="has-success has-error"
         ng-class="confirmCtrb.secret.feedbackCssClass()">

        @* INPUT GROUP COLUMN *@
        <div class="col-md-5">
            @* SR LABEL *@
            <label for="@Html.IdFor(x => x.Secret)" class="control-label sr-only">
                @EmailConfirmation.Constraints.SecretLabel
            </label>
            <div class="@Html.CssClassWhenInvalidFor(x => x.Secret, inputGroupCss)"
                 remove-class="@inputGroupCss"
                 ng-class="confirmCtrb.secret.inputGroupCssClass('lg')">
                <input type="email"
                       class="form-control @inputCss"
                       placeholder="[Paste or type secret code here]"
                       id="@Html.IdFor(x => x.Secret)"
                       name="secret"
                       value="@Html.ValueFor(x => x.Secret)"
                       ng-init="vm.secret='@Html.ValueForJavaScriptString(x => x.Secret)'"
                       ng-model="vm.secret"
                       required
                       model-contrib
                       server-error="@Html.ValidationMessageTextFor(x => x.Secret)"
                       server-validate="Url.Action(MVC.EmailAddresses.SignUpValidate(null, secret))"
                       server-validate-throttle="400" />

                <span class="input-group-addon validation @Html.CssClassWhenValidFor(x => x.Secret, "hide")"
                      remove-class="hide"
                      ng-class="vm.secretInputGroupValidationAddOnCssClass()">
                    <i class="fa fa-fw fa-asterisk default" title="This is a required field"></i>
                    <i class="fa fa-fw fa-times error"></i>
                    <i class="fa fa-fw fa-spinner fa-spin spin-fast spinner"></i>
                    <i class="fa fa-fw fa-exclamation-triangle warning"></i>
                    <i class="fa fa-fw fa-check success"></i>
                </span>
            </div>
        </div>

        @* VALIDATION MESSAGES COLUMNS *@
        <div class="col-md-7 validation help-block help-block-horizontal-md hidden-sm hidden-xs">
            <span tooltip="@Resources.notempty_error.Replace("{PropertyName}", EmailConfirmation.Constraints.SecretLabel)"
                  tooltip-toggle="vm.isSecretRequiredError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span tooltip="{{ confirmCtrb.secret.error.server }}"
                  tooltip-toggle="vm.isSecretServerError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span ng-class="{ hide: true }">@Html.ValidationMessageFor(x => x.Secret)</span>
        </div>
        <div class="col-md-7 validation help-block hidden-md hidden-lg">
            <span ng-show="vm.isSecretRequiredError()" ng-cloak>
                @Resources.notempty_error.Replace("{PropertyName}", EmailConfirmation.Constraints.SecretLabel)
            </span>
            <span ng-show="vm.isSecretServerError()" ng-cloak>
                {{ confirmCtrb.secret.error.server }}
            </span>
            <span ng-class="{ hide: true }">
                @Html.ValidationMessageFor(x => x.Secret)
            </span>
        </div>
    </div>

    @* FORM SUBMIT BUTTON *@
    <div class="form-group">
        <div class="col-md-12 col">
            @{
                var buttonClass = ViewData.ModelState.IsValid ? null : "btn-warning";
                var defaultClass = ViewData.ModelState.IsValid ? null : "hide";
                var warningClass = ViewData.ModelState.IsValid ? "hide" : null;
                var messageClass = ViewData.ModelState.IsValid ? "hide" : null;
            }
            <button type="submit" class="pull-left btn btn-primary btn-lg @buttonClass"
                    ng-class="{ 'btn-warning': confirmCtrb.hasError && !confirmCtrb.isSubmitWaiting }"
                    ng-disabled="confirmCtrb.isSubmitWaiting"
                    remove-class="@buttonClass">
                <i class="fa fa-fw fa-user @defaultClass"
                   remove-class="@defaultClass"
                   ng-show="!confirmCtrb.isSubmitWaiting && !confirmCtrb.hasError"></i>
                <i class="fa fa-fw fa-exclamation-triangle @warningClass"
                   remove-class="@warningClass"
                   ng-show="!confirmCtrb.isSubmitWaiting && confirmCtrb.hasError"></i>
                <i class="fa fa-fw fa-spinner fa-spin spin-fast" ng-show="confirmCtrb.isSubmitWaiting" ng-cloak></i>
                Confirm email address
            </button>
            <span class="has-error pull-left nudge-right @messageClass" remove-class="@messageClass" ng-show="!confirmCtrb.isSubmitWaiting && confirmCtrb.hasError">
                <div class="help-block">
                    Could not confirm email address due to above error(s).
                </div>
            </span>
        </div>
    </div>
</form>
