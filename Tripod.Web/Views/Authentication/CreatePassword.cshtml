@using Tripod
@using Tripod.Domain.Security
@using Tripod.Web.Models
@using UserConstraints = Tripod.Domain.Security.User.Constraints
@model CreateLocalMembership

@{
    ViewBag.Title = "Create your password";
}

<h2>
    Sign Up  &raquo;
    <small>Create your password.</small>
</h2>
<hr class="hr-sm hr-space" />

@{ Html.RenderPartial(MVC.Authentication.Views._SignUpWizard, new SignUpWizardModel(3)); }
<hr class="hr-space hr-md" />

<h3>
    Thanks for confirming your email address! <small>We're almost ready to sign you in.</small>
</h3>
<p>
    Choose a password that is at least 8 characters long (but no more than 100 characters).<br />
    Enter the same password in both fields. You know the drill.
</p>

<form role="form"
      method="POST"
      action="@Url.Action(MVC.EmailAddresses.Password((string)ViewBag.Token))"
      novalidate
      name="createLocalForm"
      form-contrib="createLocalCtrb"
      form-submitted="@IsPost"
      class="form-horizontal">

    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true)
    @{
        const string inputCss = "input-lg";
        const string inputGroupCss = "input-group input-group-lg";
    }

    @* PASSWORD INPUT *@
    <div class="form-group form-group-lg @Html.BootstrapValidationCssClassFor(x => x.Password)"
         remove-class="has-success has-error"
         ng-class="createLocalCtrb.password.feedbackCssClass()">

        @* INPUT GROUP COLUMN *@
        <div class="col-md-5">
            @* SR LABEL *@
            <label for="@Html.IdFor(x => x.Password)" class="control-label sr-only">
                @LocalMembership.Constraints.PasswordLabel
            </label>
            <div class="@Html.CssClassWhenNotNullModel(inputGroupCss)"
                 remove-class="@inputGroupCss"
                 ng-class="createLocalCtrb.password.inputGroupCssClass('lg')">
                <input type="password"
                       class="form-control @inputCss"
                       placeholder="@LocalMembership.Constraints.PasswordLabel"
                       id="@Html.IdFor(x => x.Password)"
                       name="password"
                       value=""
                       ng-model="vm.password"
                       required
                       model-contrib
                       server-error="@Html.ValidationMessageTextFor(x => x.Password)"
                       server-validate="@Url.Action(MVC.Authentication.SignInValidate(null, "userName"))"
                       server-validate-throttle="400" />

                <span class="input-group-addon validation @Html.CssClassWhenNullModel("hide")"
                      remove-class="hide"
                      ng-class="vm.passwordInputGroupValidationAddOnCssClass()">
                    <i class="fa fa-fw fa-asterisk default" title="This is a required field"></i>
                    <i class="fa fa-fw fa-times error"></i>
                    <i class="fa fa-fw fa-spinner fa-spin spin-fast spinner"></i>
                    <i class="fa fa-fw fa-exclamation-triangle warning"></i>
                    <i class="fa fa-fw fa-check success"></i>
                </span>
            </div>
        </div>

        @* VALIDATION MESSAGES COLUMNS *@
        <div class="col-md-7 validation help-block help-block-horizontal-md hidden-sm hidden-xs">
            <span tooltip="@Resources.notempty_error.Replace("{PropertyName}", LocalMembership.Constraints.PasswordLabel))"
                  tooltip-toggle="vm.isPasswordRequiredError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span tooltip="{{ createLocalCtrb.password.error.server }}"
                  tooltip-toggle="vm.isPasswordServerError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span ng-class="{ hide: true }">@Html.ValidationMessageFor(x => x.Password)</span>
        </div>
        <div class="col-md-7 validation help-block hidden-md hidden-lg">
            <span ng-show="vm.isPasswordRequiredError()" ng-cloak>
                @Resources.notempty_error.Replace("{PropertyName}", LocalMembership.Constraints.PasswordLabel))
            </span>
            <span ng-show="vm.isPasswordServerError()" ng-cloak>
                {{ createLocalCtrb.password.error.server }}
            </span>
            <span ng-class="{ hide: true }">
                @Html.ValidationMessageFor(x => x.Password)
            </span>
        </div>
    </div>

    @* CONFIRM PASSWORD INPUT *@
    <div class="form-group form-group-lg @Html.BootstrapValidationCssClassFor(x => x.ConfirmPassword)"
         remove-class="has-success has-error"
         ng-class="vm.confirmPasswordCssClass()">

        @* INPUT GROUP COLUMN *@
        <div class="col-md-5">
            @* SR LABEL *@
            <label for="@Html.IdFor(x => x.ConfirmPassword)" class="control-label sr-only">
                @LocalMembership.Constraints.PasswordConfirmationLabel
            </label>
            <div class="@Html.CssClassWhenInvalidFor(x => x.ConfirmPassword, inputGroupCss)"
                 remove-class="@inputGroupCss"
                 ng-class="vm.confirmPasswordInputGroupCssClass('@inputGroupCss')">
                <input type="password"
                       class="form-control @inputCss"
                       placeholder="Enter same password as above"
                       id="@Html.IdFor(x => x.ConfirmPassword)"
                       name="confirmPassword"
                       ng-model="vm.confirmPassword"
                       required
                       model-contrib
                       server-error="@Html.ValidationMessageTextFor(x => x.ConfirmPassword)" />

                <span class="input-group-addon validation @Html.CssClassWhenValidFor(x => x.ConfirmPassword, "hide")"
                      remove-class="hide"
                      ng-class="vm.confirmPasswordInputGroupValidationAddOnCssClass()">
                    <i class="fa fa-fw fa-asterisk default" title="This is a required field"></i>
                    <i class="fa fa-fw fa-times error"></i>
                    <i class="fa fa-fw fa-exclamation-triangle warning"></i>
                    <i class="fa fa-fw fa-check success"></i>
                </span>
            </div>
        </div>

        @* VALIDATION MESSAGES COLUMNS *@
        <div class="col-md-7 validation help-block help-block-horizontal-md hidden-sm hidden-xs">
            <span tooltip="@Resources.notempty_error.Replace("{PropertyName}", LocalMembership.Constraints.PasswordConfirmationLabel)"
                  tooltip-toggle="vm.isConfirmPasswordRequiredError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span tooltip="{{ createLocalCtrb.confirmPassword.error.server }}"
                  tooltip-toggle="vm.isConfirmPasswordServerError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span ng-class="{ hide: true }">@Html.ValidationMessageFor(x => x.ConfirmPassword)</span>
        </div>
        <div class="col-md-7 validation help-block hidden-md hidden-lg">
            <span ng-show="vm.isConfirmPasswordRequiredError()" ng-cloak>
                @Resources.notempty_error.Replace("{PropertyName}", LocalMembership.Constraints.PasswordConfirmationLabel)
            </span>
            <span ng-show="vm.isConfirmPasswordServerError()" ng-cloak>
                {{ createLocalCtrb.confirmPassword.error.server }}
            </span>
            <span ng-class="{ hide: true }">
                @Html.ValidationMessageFor(x => x.ConfirmPassword)
            </span>
        </div>
    </div>

    <p>
        By default, we use your email address as your username. You have the option of choosing a different username below.<br />
        If you choose a username other than your email address, you will be able to sign in using either.<br />
        If you don't want to choose a different username now, you can do it after you sign in.
    </p>

    @* USERNAME INPUT *@
    <div class="form-group form-group-lg @Html.BootstrapValidationCssClassFor(x => x.UserName)"
         remove-class="has-success has-error"
         ng-class="createLocalCtrb.userName.feedbackCssClass()">

        @* INPUT GROUP COLUMN *@
        <div class="col-md-5">
            @* SR LABEL *@
            <label for="@Html.IdFor(x => x.UserName)" class="control-label">
                @UserConstraints.NameLabel
            </label>
            <div class="@Html.CssClassWhenNotNullModel(inputGroupCss)"
                 remove-class="@inputGroupCss"
                 ng-class="createLocalCtrb.userName.inputGroupCssClass('lg')">
                <input type="text"
                       class="form-control @inputCss"
                       placeholder="Enter @UserConstraints.NameLabel.ToLower() here"
                       id="@Html.IdFor(x => x.UserName)"
                       name="userName"
                       value="@(Html.ValueFor(x => x.UserName).ToString() != "" ? Html.ValueFor(x => x.UserName) : ViewBag.EmailAddress)"
                       ng-init="vm.userName='@Html.ValueForJavaScriptString(x => x.UserName)'"
                       ng-model="vm.userName"
                       required
                       model-contrib
                       server-error="@Html.ValidationMessageTextFor(x => x.UserName)"
                       server-validate="@Url.Action(MVC.Authentication.SignInValidate(null, "userName"))"
                       server-validate-throttle="400" />

                <span class="input-group-addon validation @Html.CssClassWhenNullModel("hide")"
                      remove-class="hide"
                      ng-class="vm.userNameInputGroupValidationAddOnCssClass()">
                    <i class="fa fa-fw fa-asterisk default" title="This is a required field"></i>
                    <i class="fa fa-fw fa-times error"></i>
                    <i class="fa fa-fw fa-spinner fa-spin spin-fast spinner"></i>
                    <i class="fa fa-fw fa-exclamation-triangle warning"></i>
                    <i class="fa fa-fw fa-check success"></i>
                </span>
            </div>
        </div>

        @* VALIDATION MESSAGES COLUMNS *@
        <div class="col-md-7 validation help-block help-block-horizontal-md hidden-sm hidden-xs">
            <span tooltip="@Resources.notempty_error.Replace("{PropertyName}", UserConstraints.NameLabel))"
                  tooltip-toggle="vm.isUserNameRequiredError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span tooltip="{{ createLocalCtrb.userName.error.server }}"
                  tooltip-toggle="vm.isUserNameServerError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span ng-class="{ hide: true }">@Html.ValidationMessageFor(x => x.UserName)</span>
        </div>
        <div class="col-md-7 validation help-block hidden-md hidden-lg">
            <span ng-show="vm.isUserNameRequiredError()" ng-cloak>
                @Resources.notempty_error.Replace("{PropertyName}", UserConstraints.NameLabel))
            </span>
            <span ng-show="vm.isUserNameServerError()" ng-cloak>
                {{ createLocalCtrb.userName.error.server }}
            </span>
            <span ng-class="{ hide: true }">
                @Html.ValidationMessageFor(x => x.UserName)
            </span>
        </div>
    </div>

    @* EMAIL INPUT *@
    <div class="form-group form-group-lg">

        @* INPUT GROUP COLUMN *@
        <div class="col-md-5">
            @* SR LABEL *@
            <label for="@Html.IdFor(x => x.ConfirmationToken)" class="control-label">
                @EmailAddress.Constraints.ValueLabel
            </label>
            <small>(You cannot change this here)</small>
            <div>
                <input type="text"
                       class="form-control @inputCss"
                       id="@Html.IdFor(x => x.ConfirmationToken)"
                       value="@ViewBag.EmailAddress"
                       disabled readonly="readonly" />
                <input type="hidden"
                       name="emailAddress"
                       value="@ViewBag.EmailAddress" />
            </div>
        </div>
    </div>

    @* FORM SUBMIT BUTTON *@
    <div class="form-group">
        <div class="col-md-12 col">
            @{
                var buttonClass = ViewData.ModelState.IsValid ? null : "btn-danger";
                var readyClass = ViewData.ModelState.IsValid ? null : "hide";
                var errorClass = ViewData.ModelState.IsValid ? "hide" : null;
            }
            <button type="submit" class="pull-left btn btn-primary btn-lg @buttonClass"
                    ng-class="vm.submitCssClass()"
                    ng-disabled="vm.isSubmitDisabled()"
                    remove-class="@buttonClass">
                <i class="fa fa-fw fa-sign-in @readyClass"
                   remove-class="@readyClass"
                   ng-show="vm.isSubmitReady()"></i>
                <i class="fa fa-fw fa-exclamation-triangle @errorClass"
                   remove-class="@errorClass"
                   ng-show="vm.isSubmitError()"></i>
                <i class="fa fa-fw fa-spinner fa-spin spin-fast"
                   ng-show="vm.isSubmitWaiting()" ng-cloak></i>
                Create password &amp; sign in
            </button>
            <div class="has-error pull-left nudge-right @errorClass"
                 remove-class="@errorClass"
                 ng-show="vm.isSubmitError()">
                <div class="help-block">
                    <div ng-show="vm.isConfirmationTokenRequiredError()" ng-cloak>
                        @Resources.notempty_error.Replace("{PropertyName}", EmailConfirmation.Constraints.TicketLabel)
                    </div>
                    <div ng-show="vm.isConfirmationTokenServerError()" ng-cloak>
                        {{ confirmCtrb.confirmationToken.error.server }}
                    </div>
                    @if (!Html.ViewData.ModelState.IsValidField(Html.NameFor(x => x.ConfirmationToken).ToString()))
                    {
                        <div ng-class="{ hide: true }">
                            @Html.ValidationMessageFor(x => x.ConfirmationToken)
                        </div>
                    }
                    Could not confirm email address due to above error(s).
                </div>
            </div>
        </div>
    </div>

</form>
