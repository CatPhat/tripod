@using Tripod
@using Tripod.Domain.Security

@model SendConfirmationEmail

@{
    ViewBag.Title = "Register";
}

@section styles
{
    <style>
        input,
        select,
        textarea {
            max-width: 100%;
        }

        .email-address.input-group {
            max-width: 100%;
        }

        .acknowledge-box.input-group .input-group-addon {
            vertical-align: text-top;
            padding-top: 9px;
        }

        .acknowledge-box.input-group .form-control {
            font-weight: normal;
            cursor: pointer;
        }
    </style>
}

<h2>
    @ViewBag.Title.
</h2>

<div id="ng-app_test" ng-controller="FormController">
    <form name="f" action="@Url.Action(MVC.EmailAddresses.SendEmail())" method="POST" class="form-horizontal" role="form"
          ng-t3-submit-action="submit()" ng-t3-submit-action-attempted="@(!ViewData.ModelState.IsValid)" novalidate>

        @Html.AntiForgeryToken()

        <h4>Create a new account.</h4>
        <hr />
        @Html.ValidationSummary(true)

        @* EMAIL ADDRESS INPUT *@
        <div class="form-group"
             ng-class="{ 'has-success': t3.f.isGoodToGo(f.EmailAddress), 'has-error': t3.f.needsAttention(f.EmailAddress) }">
            <label for="@Html.IdFor(x => x.EmailAddress)" class="col-sm-2 control-label">
                @EmailAddress.Constraints.Label
            </label>
            <div class="col-md-5">
                <div class="email-address input-group">
                    <input type="email" placeholder="[example@somewhere.com]" class="form-control"
                           id="@Html.IdFor(x => x.EmailAddress)" name="@Html.NameFor(x => x.EmailAddress)" value="@Html.ValueFor(x => x.EmailAddress)"
                           ng-model="m.emailAddress" required
                           ng-init="m.emailAddress='@Html.ValueFor(x => x.EmailAddress)'" />
                    <span class="input-group-addon validation-icon"></span>
                </div>
            </div>
            <div class="col-md-5 validation-msg help-block">
                <span ng-show="!t3.f.needsAttention(f.EmailAddress) && f.EmailAddress.$pristine">
                    @Html.ValidationMessageFor(x => x.EmailAddress)
                </span>
                <span ng-show="t3.f.needsAttention(f.EmailAddress)" ng-cloak>
                    <span ng-show="f.EmailAddress.$error.required && !f.EmailAddress.$viewValue">
                        @Html.Raw(Resources.notempty_error.Replace("{PropertyName}", @EmailAddress.Constraints.Label))
                    </span>
                    <span ng-show="f.EmailAddress.$error.email">
                        @Html.Raw(Resources.email_error.Replace("{PropertyValue}", "{{ f.EmailAddress.$viewValue }}"))
                    </span>
                    <span ng-show="f.EmailAddress.$error.server">
                        why {{ serverErrors.EmailAddress }} not
                    </span>
                </span>
            </div>
        </div>

        @* DISCLAIMER CHECKBOX INPUT *@
        <div class="form-group" ng-class="{ 'has-success': t3.f.isGoodToGo(f.IsExpectingEmail), 'has-error': t3.f.needsAttention(f.IsExpectingEmail) }">
            <div class="col-md-offset-2 col-md-5">
                <label class="acknowledge-box input-group">
                    <span class="input-group-addon">
                        <input type="checkbox" id="@Html.IdFor(x => x.IsExpectingEmail)" name="@Html.NameFor(x => x.IsExpectingEmail)" value="true"
                               checked="@(Model != null && Model.IsExpectingEmail ? "checked" : null)"
                               ng-model="m.isExpectingEmail" required
                               ng-init="m.isExpectingEmail=@(Model != null ? Html.ValueFor(x => x.IsExpectingEmail) : MvcHtmlString.Create("false"))" />
                        <input type="hidden" name="@Html.NameFor(x => x.IsExpectingEmail)" value="false" />
                    </span>
                    <span class="form-control">
                        Send an email to the above address so that I can confirm access to it.
                    </span>
                    <span class="input-group-addon validation-icon"></span>
                </label>
            </div>
            <div class="col-md-5 validation-msg">
                @Html.ValidationMessageFor(x => x.IsExpectingEmail)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-default" value="Send confirmation email" ng-click="m.click()" ng-xdisabled="f.$invalid" />
                <a href="@Url.Action(MVC.EmailAddresses.Index())">Reload</a>
            </div>
        </div>
    </form>
    <pre ng-cloak>
m = {{m | json}}
f = {{f | json}}
f.EmailAddress.$viewValue = {{f.EmailAddress.$viewValue | json}}
f.EmailAddress.$pristine = {{f.EmailAddress.$pristine | json}}
f.IsExpectingEmail.$viewValue = {{f.IsExpectingEmail.$viewValue | json}}
f.valid = {{ f.$valid | json}}
m.hasSuccess(f.EmailAddress) = {{ m.hasSuccess(f.EmailAddress) }}
m.hasError(f.EmailAddress) = {{ m.hasError(f.EmailAddress) }}
f.EmailAddress.$invalid = {{ f.EmailAddress.$invalid }}
f.EmailAddress.$dirty = {{ f.EmailAddress.$dirty }}
t3.f.needsAttention(f.EmailAddress) = {{ t3.f.needsAttention(f.EmailAddress) }}
f.IsExpectingEmail = {{ f.IsExpectingEmail }}
t3.f.needsAttention(f.IsExpectingEmail) = {{ t3.f.needsAttention(f.IsExpectingEmail) }}
t3.f.isGoodToGo(f.IsExpectingEmail) = {{ t3.f.needsAttention(f.IsExpectingEmail) }}
    </pre>
</div>

@section scripts {
    <script src="~/scripts/require.js" data-main="@Url.Content("~/app/security/confirm-email-address/FormMain.js")"></script>
}
