@using Tripod.Domain.Security
@using UserConstraints = Tripod.Domain.Security.User.Constraints

@model RedeemEmailVerification

@{
    ViewBag.Title = "Confirm adding this email to your account";
}

<h2>
    Add email  &raquo;
    <small>@ViewBag.Title.</small>
</h2>
<hr class="hr-sm hr-space" />

@{ Html.RenderPartial(MVC.Security.Views.SharedViews._VerifyEmailWizardSteps, new VerifyEmailWizardModel(3, "Confirm email")); }
<hr class="hr-space hr-md" />

<h3>
    Thanks for verifying your email address! <small>We're almost ready to add it to your account.</small>
</h3>

<hr class="hr-md hr-space" />
<p>
    <strong>Please confirm your intent:</strong> Do you want to add the email address <strong>@ViewBag.EmailAddress</strong> to your <strong>@User.Identity.Name</strong> account?
</p>
<hr class="hr-md hr-space" />

@{ Html.RenderPartial(MVC.Shared.Views._AlertsTempData, new AlertRenderOptions { Inline = true }); }

<div class="row">
    <div class="col-md-12">
        <form role="form"
              method="POST"
              action="@Url.Action(MVC.UserEmailConfirm.Post())"
              class=" form-inline">
            @Html.AntiForgeryToken()
            <input type="hidden"
                   name="emailAddress"
                   value="@ViewBag.EmailAddress" />
            <input type="hidden"
                   name="ticket"
                   value="@ViewBag.Ticket"
                   ng-init="vm.ticket='@ViewBag.Ticket'"
                   ng-model="vm.ticket"
                   required
                   model-contrib
                   server-error="@Html.ValidationMessageTextFor(x => x.Ticket)"
                   server-validate="@Url.Action(MVC.SignUpCreateUser.Validate(null, "ticket"))"
                   server-validate-data="{ token: vm.token }" />
            <input type="hidden"
                   name="token"
                   value="@ViewBag.Token"
                   ng-init="vm.token='@ViewBag.Token'"
                   ng-model="vm.token"
                   model-contrib />
            @{
                var buttonClass = ViewData.ModelState.IsValid ? null : "btn-danger";
                var readyClass = ViewData.ModelState.IsValid ? null : "hide";
                var errorClass = ViewData.ModelState.IsValid ? "hide" : null;
            }
            <button type="submit"
                    class="pull-left btn btn-primary @buttonClass"
                    ng-class="vm.submitCssClass()"
                    ng-disabled="vm.isSubmitDisabled()"
                    remove-class="@buttonClass">
                <i class="fa fa-fw fa-envelope @readyClass"
                   remove-class="@readyClass"
                   ng-show="vm.isSubmitReady()"></i>
                <i class="fa fa-fw fa-exclamation-triangle @errorClass"
                   remove-class="@errorClass"
                   ng-show="vm.isSubmitError()"></i>
                <i class="fa fa-fw fa-spinner fa-spin spin-fast"
                   ng-show="vm.isSubmitWaiting()" ng-cloak></i>
                Yes, confirm email
            </button>
        </form>
        <form role="form"
              method="POST"
              action="@Url.Action(MVC.UserEmailConfirm.Reject())"
              class=" form-inline">
            @Html.AntiForgeryToken()
            <input type="hidden"
                   name="emailAddress"
                   value="@ViewBag.EmailAddress" />
            <input type="hidden"
                   name="token"
                   value="@ViewBag.Token" />
            <input type="hidden"
                   name="ticket"
                   value="@ViewBag.Ticket" />
            <button type="submit" class="btn btn-link nudge-right">
                No, do not confirm email
            </button>
        </form>
    </div>
</div>
