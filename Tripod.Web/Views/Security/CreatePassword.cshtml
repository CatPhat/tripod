@using System.Globalization
@using Tripod.Domain.Security
@model CreateLocalMembershipModel

@{
    ViewBag.Title = string.Format("Create a {0}", LocalMembership.Constraints.PasswordLabel.ToLower());
}

@section styles
{
    <link href="~/content/security/user-settings.css" rel="stylesheet" />
}


@{ Html.RenderPartial(MVC.Users.Views._UserJumbotron, Model.UserView); }

<section class="user-settings row">

    @{ Html.RenderPartial(MVC.Security.Views._UserSettingsNav, new UserSettingsNavModel { IsPassword = true }); }

    <div class="col-md-8" role="main">

        <h3 class="scalp">
            @ViewBag.Title
        </h3>

        <p>
            Your user account does not have a local password. Use the form below to create one in case
            you ever lose access to your external login(s).
        </p>

        @{ Html.RenderPartial(MVC.Security.Views._CreatePasswordForm, Model.Command); }

    </div>
</section>

@section scripts
{
    <script src="~/scripts/knockout-3.0.0.js"></script>
    <script src="~/scripts/knockout.mapping-latest.js"></script>
    <script src="~/scripts/knockout.validation.js"></script>
    <script src="~/app/_common/widgets/BindingHandlers.js"></script>
    <script src="~/app/_common/widgets/Spinner.js"></script>
    <script src="~/app/_common/widgets/ValidationState.js"></script>
    <script src="~/app/_common/widgets/ValidationRules.js"></script>
    <script src="~/app/_common/widgets/BootstrapTooltip.js"></script>
    <script src="~/app/security/CreatePasswordForm.js"></script>
    <script>
        App.Security.CreatePasswordForm.ViewModel.create({
            element: document.getElementById('create_password_form'),
            isPostBack: '@IsPost' == 'True',
            passwordRequiredMessage: '@Resources.notempty_error.Replace("{PropertyName}", LocalMembership.Constraints.PasswordLabel)',
            passwordMinLength: parseInt('@LocalMembership.Constraints.PasswordMinLength'),
            passwordMaxLength: parseInt('@LocalMembership.Constraints.PasswordMaxLength'),
            //passwordMaxLength: 10,
            passwordMinLengthMessage: '@(Resources.Validation_MinLength
                .Replace("{PropertyName}", LocalMembership.Constraints.PasswordLabel)
                .Replace("{MinLength}", LocalMembership.Constraints.PasswordMinLength.ToString(CultureInfo.InvariantCulture)))',
            passwordMaxLengthMessage: '@(Resources.Validation_MaxLength
                .Replace("{PropertyName}", LocalMembership.Constraints.PasswordLabel)
                .Replace("{MaxLength}", LocalMembership.Constraints.PasswordMaxLength.ToString(CultureInfo.InvariantCulture)))',
            passwordValidateUrl: '@Url.Action(MVC.SignUp.ValidateCreateLocalMembership(null, "password"))',
            confirmPasswordRequiredMessage: '@Resources.notempty_error.Replace("{PropertyName}", LocalMembership.Constraints.PasswordConfirmationLabel)',
            confirmPasswordEqualsMessage: '@(Resources.Validation_PasswordDoesNotEqualConfirmation
                .Replace("{PropertyName}", LocalMembership.Constraints.PasswordConfirmationLabel)
                .Replace("{PasswordLabel}", LocalMembership.Constraints.PasswordLabel.ToLower()))',
            confirmPasswordValidateUrl: '@Url.Action(MVC.SignUp.ValidateCreateLocalMembership(null, "confirmPassword"))',
        });
    </script>
}
