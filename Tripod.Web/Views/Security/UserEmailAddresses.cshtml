@using UserConstraints = Tripod.Domain.Security.User.Constraints

@model EmailAddressSettingsModel

@{
    ViewBag.Title = "Email addresses";
}

@section styles
{
    <link href="~/content/security/user-settings.css" rel="stylesheet" />
}



@{ Html.RenderPartial(MVC.Users.Views._UserJumbotron, Model.UserView); }

<section class="user-settings row">

    @{ Html.RenderPartial(MVC.Security.Views._UserSettingsNav, new UserSettingsNavModel { IsEmailAddresses = true }); }

    <div class="col-md-8" role="main">

        @{ Html.RenderPartial(MVC.Shared.Views._AlertsTempData, new AlertRenderOptions()); }

        <h3 class="scalp">
            My email addresses
        </h3>

        <ul class="emails list-unstyled">
            @foreach (var emailAddress in Model.EmailAddresses)
            {
                var flavor = emailAddress.IsPrimary ? "success" : emailAddress.IsVerified ? "info" : "warning";
                <li class="clearfix @flavor">
                    @Html.Gravatar(emailAddress.HashedValue, 32)
                    <span class="email-value">
                        @emailAddress.Value
                        @*when this is really long, this happens*@
                    </span>
                    @if (emailAddress.IsPrimary)
                    {
                        <span class="label label-success">Primary</span>
                    }
                    else if (emailAddress.IsVerified)
                    {
                        <span class="label label-info">Verified</span>
                    }
                    else
                    {
                        <span class="label label-warning">Unverified</span>
                    }

                    @** BUTTONS *@
                    <div class="pull-right">
                        @if (!emailAddress.IsPrimary)
                        {
                            if (emailAddress.IsVerified)
                            {
                                <form method="POST" action="@Url.Action(MVC.UserEmails.UpdateEmailAddress(emailAddress.EmailAddressId, null))" class="form-inline" style="display: inline;">
                                    @Html.AntiForgeryToken()
                                    @Html.HttpMethodOverride(HttpVerbs.Put)
                                    <input type="hidden"
                                           name="isPrimary"
                                           value="true">
                                    <button type="submit" class="btn btn-primary btn-sm">
                                        <i class="fa fa-arrow-up"></i>
                                        Make Primary
                                    </button>
                                </form>
                            }
                            else
                            {
                                <form method="POST" action="@Url.Action(MVC.UserEmails.SendVerificationEmail())" class="form-inline" style="display: inline;">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden"
                                           name="verifyUrlFormat"
                                           value="@Model.SendVerificationEmail.VerifyUrlFormat">
                                    <input type="hidden"
                                           name="sendFromUrl"
                                           value="@Model.SendVerificationEmail.SendFromUrl">
                                    <input type="hidden"
                                           name="purpose"
                                           value="@Model.SendVerificationEmail.Purpose">
                                    <input type="hidden"
                                           name="emailAddress"
                                           value="@emailAddress.Value">
                                    <input type="hidden"
                                           name="isExpectingEmail"
                                           value="true">
                                    <button type="submit" class="btn btn-warning btn-sm">
                                        <i class="fa fa-exclamation"></i>
                                        Verify
                                    </button>
                                </form>
                            }
                            <form method="POST" action="@Url.Action(MVC.UserEmails.DeleteEmailAddress(emailAddress.EmailAddressId, null))" class="form-inline" style="display: inline;">
                                @Html.AntiForgeryToken()
                                @Html.HttpMethodOverride(HttpVerbs.Delete)
                                <button type="submit"
                                        class="btn btn-danger btn-sm"
                                        data-bootbox="confirm-form-submit"
                                        data-bootbox-class="modal-danger modal-buttons-left"
                                        data-bootbox-close="false"
                                        data-bootbox-title="Please confirm your intent"
                                        data-bootbox-message="Are you sure you want to remove your **@emailAddress.Value** email address? After you remove it, you will no longer be able to use it to sign on or reset your password. You will be able to add it back, but you will be required you to verify it again."
                                        data-bootbox-confirm="Yes, confirm remove"
                                        data-bootbox-confirm-class="btn-danger"
                                        data-bootbox-deny="No, cancel remove"
                                        data-bootbox-deny-class="btn-link">
                                    <i class="fa fa-times"></i>
                                    Remove
                                </button>
                            </form>
                        }
                    </div>
                </li>
            }
        </ul>

        <h3>
            Add a new email address
        </h3>

        @{ Html.RenderPartial(MVC.Security.Views._SendVerificationEmailForm, Model.SendVerificationEmail); }

    </div>
</section>

@section scripts
{
    @{ Html.RenderPartial(MVC.Scripts.Views.Angular); }
    <script src="~/scripts/bootbox.js"></script>
    <script src="~/scripts/marked.js"></script>
    <script src="~/app/security/SignUpEmailForm.js"></script>
    <script src="~/app/_common/unobtrusive/bootbox-confirm.js"></script>
}