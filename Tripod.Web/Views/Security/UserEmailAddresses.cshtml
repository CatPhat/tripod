@using UserConstraints = Tripod.Domain.Security.User.Constraints

@model EmailAddressSettingsModel

@{
    ViewBag.Title = "User";
}

@section styles
{
    <link href="~/content/security/user-settings.css" rel="stylesheet" />
    <style>
        .modal-primary .modal-header {
            border-radius: 5px 5px 0 0;
            color: #fff;
            background-color: #428bca;
        }

        .modal-danger .modal-header {
            border-radius: 5px 5px 0 0;
            color: #fff;
            background-color: #d9534f;
        }

        .modal-buttons-left .modal-footer {
            text-align: left;
        }

        body.modal-open, .modal-open .navbar-fixed-top {
            overflow: auto;
            margin-right: 0;
        }

        .modal {
            overflow-y: auto;
        }
    </style>
}



@{ Html.RenderPartial(MVC.Users.Views._UserJumbotron, Model.UserView); }

<section class="user-settings row">
    <nav class="user col-md-4 hidden-xs hidden-sm">
        <ul class="nav nav-pills nav-stacked" role="navigation">
            <li class="nav-header">
                <a href="@Url.Action(MVC.Users.ById(User.Identity.GetAppUserId()))">
                    @Html.Gravatar(32)
                    <strong>
                        @User.Identity.Name
                    </strong>
                </a>
            </li>
            <li>
                <a href="@Url.Action(MVC.User.SettingsIndex())">
                    <i class="fa fa-user"></i>
                    General settings
                </a>
            </li>
            <li class="active">
                <a href="@Url.Action(MVC.User.Emails())">
                    <i class="fa fa-envelope"></i>
                    Email addresses
                </a>
            </li>
            <li>
                <a href="#">
                    <i class="fa fa-sign-in"></i>
                    Logins
                </a>
            </li>
            <li>
                <a href="#">
                    <i class="fa fa-key"></i>
                    Password
                </a>
            </li>
        </ul>
        <hr class="hr-md hr-space" />
    </nav>
    <div class="col-md-8" role="main">

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                Could not send verification email due to error(s) below.
            </div>
        }

        <h3 class="scalp">
            My email addresses
        </h3>

        <ul class="emails list-unstyled">
            @foreach (var emailAddress in Model.EmailAddresses)
            {
                var flavor = emailAddress.IsPrimary ? "success" : emailAddress.IsVerified ? "info" : "warning";
                <li class="clearfix @flavor">
                    @Html.Gravatar(emailAddress.HashedValue, 32)
                    <span class="email-value">
                        @emailAddress.Value
                        @*when this is really long, this happens*@
                    </span>
                    @if (emailAddress.IsPrimary)
                    {
                        <span class="label label-success">Primary</span>
                    }
                    else if (emailAddress.IsVerified)
                    {
                        <span class="label label-info">Verified</span>
                    }
                    else
                    {
                        <span class="label label-warning">Unverified</span>
                    }
                    <div class="pull-right">
                        @if (!emailAddress.IsPrimary)
                        {
                            if (emailAddress.IsVerified)
                            {
                                <button type="button" class="btn btn-primary btn-sm">
                                    <i class="fa fa-arrow-up"></i>
                                    Make Primary
                                </button>
                            }
                            else
                            {
                                <form method="POST" action="@Url.Action(MVC.User.SendVerificationEmail())" class="form-inline" style="display: inline;">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden"
                                           name="verifyUrlFormat"
                                           value="@Model.SendVerificationEmail.VerifyUrlFormat">
                                    <input type="hidden"
                                           name="sendFromUrl"
                                           value="@Model.SendVerificationEmail.SendFromUrl">
                                    <input type="hidden"
                                           name="purpose"
                                           value="@Model.SendVerificationEmail.Purpose">
                                    <input type="hidden"
                                           name="emailAddress"
                                           value="@emailAddress.Value">
                                    <input type="hidden"
                                           name="isExpectingEmail"
                                           value="true">
                                    <button type="submit" class="btn btn-warning btn-sm">
                                        <i class="fa fa-exclamation"></i>
                                        Verify
                                    </button>
                                </form>
                            }
                            <form method="POST" action="@Url.Action(MVC.User.DeleteEmailAddress(emailAddress.EmailAddressId, null))" class="form-inline" style="display: inline;">
                                @Html.AntiForgeryToken()
                                @Html.HttpMethodOverride(HttpVerbs.Delete)
                                <button type="submit"
                                        class="btn btn-danger btn-sm"
                                        data-bootbox="confirm-form-submit"
                                        data-bootbox-class="modal-danger modal-buttons-left"
                                        data-bootbox-close="false"
                                        data-bootbox-title="Please confirm your intent"
                                        data-bootbox-message="Are you sure you want to delete the email address @emailAddress.Value?"
                                        data-bootbox-confirm="Yes, confirm delete"
                                        data-bootbox-confirm-class="btn-danger"
                                        data-bootbox-deny="No, cancel delete"
                                        data-bootbox-deny-class="btn-link">
                                    <i class="fa fa-times"></i>
                                    Delete
                                </button>
                            </form>
                        }

                    </div>
                </li>
            }
        </ul>

        <h3>
            Add a new email address
        </h3>

        @{ Html.RenderPartial(MVC.Security.Views._SendVerificationEmailForm, Model.SendVerificationEmail); }

    </div>
</section>

@section scripts
{
    @{ Html.RenderPartial(MVC.Scripts.Views.Angular); }
    <script src="~/scripts/bootbox.js"></script>
    <script src="~/app/security/SignUpEmailForm.js"></script>
    <script src="~/app/_common/unobtrusive/bootbox-confirm.js"></script>
}