@using Tripod
@using Tripod.Domain.Security
@using Tripod.Web.Models
@model VerifyConfirmEmailSecret

@{
    ViewBag.Title = "Confirm your email address";
}

<h2>
    Sign Up  &raquo;
    <small>@ViewBag.Title.</small>
</h2>
<hr class="hr-sm hr-space" />

@{ Html.RenderPartial(MVC.Security.Views._SignUpWizard, new SignUpWizardModel(2)); }
<hr class="hr-space hr-md" />
<p>
    An email has been sent to
    @if (ViewBag.EmailAddress != null)
    {
        <strong>@ViewBag.EmailAddress</strong><text>.</text>
    }
    else
    {
        <text>the address you entered on the previous page.</text>
    }
    You have two options for confirming it:
</p>
<ul class="no-indent">
    <li>
        <p>
            In the email you were sent, there is a 10 to 12 character secret code. Paste it into the box below and click the button to proceed.
        </p>
        <p>
            <strong>or</strong>
        </p>
    </li>
    <li>
        Click the hyperlink in the email to skip this step. However, clicking it will open a different tab than this one.<br />
        If you choose this option, you can come back and close this tab after you create your password and successfully sign in.
    </li>
</ul>

<hr class="hr-space hr-md" />

<form role="form"
      method="POST"
      action="@Url.Action(MVC.SignUpSecret.Index((string)ViewBag.Ticket, null as VerifyConfirmEmailSecret))"
      class="form-horizontal"
      novalidate
      ng-app="sign-up-confirm-form"
      ng-controller="App.Security.SignUpSecretForm.Controller"
      name="signUpSecretForm"
      form-contrib="signUpSecretCtrb"
      form-submitted="@IsPost">

    @Html.AntiForgeryToken()
    <input type="hidden"
           name="ticket"
           value="@ViewBag.Ticket"
           ng-init="vm.ticket='@ViewBag.Ticket'"
           ng-model="vm.ticket"
           required
           model-contrib
           server-error="@Html.ValidationMessageTextFor(x => x.Ticket)"
           server-validate="@Url.Action(MVC.SignUpSecret.Validate(null, "ticket"))"
           server-validate-data="{ purpose: vm.purpose }" />
    <input type="hidden"
           name="@Html.NameFor(x => x.Purpose)"
           value="@ViewBag.Purpose"
           ng-init="vm.purpose='@ViewBag.Purpose'"
           ng-model="vm.purpose" />
    <input type="hidden"
           name="emailAddress"
           value="@ViewBag.EmailAddress" />

    @Html.ValidationSummary(true)

    @{
        const string inputCss = "input-lg";
        const string inputGroupCss = "input-group input-group-lg";
    }

    @* SECRET CODE INPUT *@
    <div class="form-group form-group-lg @Html.BootstrapValidationCssClassFor(x => x.Secret)"
         remove-class="has-success has-error"
         ng-class="signUpSecretCtrb.secret.feedbackCssClass()">

        @* INPUT GROUP COLUMN *@
        <div class="col-md-5">
            @* SR LABEL *@
            <label for="@Html.IdFor(x => x.Secret)" class="control-label sr-only">
                @EmailConfirmation.Constraints.SecretLabel
            </label>
            <div class="@Html.CssClassWhenNotNullModel(inputGroupCss)"
                 remove-class="@inputGroupCss"
                 ng-class="signUpSecretCtrb.secret.inputGroupCssClass('lg')">
                <input type="text"
                       class="form-control @inputCss"
                       placeholder="[Paste or type secret code here]"
                       id="@Html.IdFor(x => x.Secret)"
                       name="secret"
                       value="@Html.ValueFor(x => x.Secret)"
                       ng-init="vm.secret='@Html.ValueForJavaScriptString(x => x.Secret)'"
                       ng-model="vm.secret"
                       required
                       model-contrib
                       server-error="@Html.ValidationMessageTextFor(x => x.Secret)"
                       server-validate="@Url.Action(MVC.SignUpSecret.Validate(null, "secret"))"
                       server-validate-data="{ ticket: vm.ticket }"
                       server-validate-throttle="400" />

                <span class="input-group-addon validation @Html.CssClassWhenNullModel("hide")"
                      remove-class="hide"
                      ng-class="vm.secretInputGroupValidationAddOnCssClass()">
                    <i class="fa fa-fw fa-asterisk default" title="This is a required field"></i>
                    <i class="fa fa-fw fa-times error"></i>
                    <i class="fa fa-fw fa-spinner fa-spin spin-fast spinner"></i>
                    <i class="fa fa-fw fa-exclamation-triangle warning"></i>
                    <i class="fa fa-fw fa-check success"></i>
                </span>
            </div>
        </div>

        @* VALIDATION MESSAGES COLUMNS *@
        <div class="col-md-7 validation help-block help-block-horizontal-md hidden-sm hidden-xs">
            <span tooltip="@Resources.notempty_error.Replace("{PropertyName}", EmailConfirmation.Constraints.SecretLabel)"
                  tooltip-toggle="vm.isSecretRequiredError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span tooltip="{{ signUpSecretCtrb.secret.error.server }}"
                  tooltip-toggle="vm.isSecretServerError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span ng-class="{ hide: true }">@Html.ValidationMessageFor(x => x.Secret)</span>
        </div>
        <div class="col-md-7 validation help-block hidden-md hidden-lg">
            <span ng-show="vm.isSecretRequiredError()" ng-cloak>
                @Resources.notempty_error.Replace("{PropertyName}", EmailConfirmation.Constraints.SecretLabel)
            </span>
            <span ng-show="vm.isSecretServerError()" ng-cloak>
                {{ signUpSecretCtrb.secret.error.server }}
            </span>
            <span ng-class="{ hide: true }">
                @Html.ValidationMessageFor(x => x.Secret)
            </span>
        </div>
    </div>

    @* FORM SUBMIT BUTTON *@
    <div class="form-group">
        <div class="col-md-12">
            @{
                var buttonClass = ViewData.ModelState.IsValid ? null : "btn-danger";
                var readyClass = ViewData.ModelState.IsValid ? null : "hide";
                var errorClass = ViewData.ModelState.IsValid ? "hide" : null;
            }
            <button type="submit" class="pull-left btn btn-primary btn-lg @buttonClass"
                    ng-class="vm.submitCssClass()"
                    ng-disabled="vm.isSubmitDisabled()"
                    remove-class="@buttonClass">
                <i class="fa fa-fw fa-user @readyClass"
                   remove-class="@readyClass"
                   ng-show="vm.isSubmitReady()"></i>
                <i class="fa fa-fw fa-exclamation-triangle @errorClass"
                   remove-class="@errorClass"
                   ng-show="vm.isSubmitError()"></i>
                <i class="fa fa-fw fa-spinner fa-spin spin-fast"
                   ng-show="vm.isSubmitWaiting()" ng-cloak></i>
                Confirm email address
            </button>
            <div class="has-error pull-left nudge-right @errorClass"
                 remove-class="@errorClass"
                 ng-show="vm.isSubmitError()">
                <div class="help-block">
                    <div ng-show="vm.isTicketRequiredError()" ng-cloak>
                        @Resources.notempty_error.Replace("{PropertyName}", EmailConfirmation.Constraints.TicketLabel)
                    </div>
                    <div ng-show="vm.isTicketServerError()" ng-cloak>
                        {{ signUpSecretCtrb.ticket.error.server }}
                    </div>
                    @if (!Html.ViewData.ModelState.IsValidField(Html.NameFor(x => x.Ticket).ToString()))
                    {
                        <div ng-class="{ hide: true }">
                            @Html.ValidationMessageFor(x => x.Ticket)
                        </div>
                    }
                    Could not confirm email address due to above error(s).
                </div>
            </div>
        </div>
    </div>
</form>

@section scripts
{
    @{ Html.RenderPartial(MVC.Scripts.Views.Angular); }
    <script src="~/app/security/SignUpSecretForm.js"></script>
}
