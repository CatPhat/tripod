@using System.Globalization
@using Tripod
@using Tripod.Domain.Security
@using Tripod.Web.Models
@using UserConstraints = Tripod.Domain.Security.User.Constraints

@model CreateRemoteMembership

@{
    ViewBag.Title = "Complete your registration";
}

<h2>
    Sign in  &raquo;
    <small>@ViewBag.Title.</small>
</h2>
<hr class="hr-sm hr-space" />

@if (!ViewBag.HasClaimsEmail)
{
    Html.RenderPartial(MVC.Security.Views._SignUpWizard, new SignUpWizardModel(3));
    <hr class="hr-space hr-md" />
}
else
{
    // this helps when formatting the document (CTRL + K + D), it has no functional purpose
}

@* PROVIDER ALERT *@
<div class="alert alert-info alert-inline">
    You've successfully authenticated with
    @if (ViewBag.HasClaimsEmail)
    {
        <strong>@ViewBag.LoginProvider</strong><text>.</text>
    }
    else
    {
        <strong>@ViewBag.LoginProvider</strong><text> and confirmed an email address.</text>
    }
    <br />
    Choose a user name for your account and click the button below to finish signing in.
</div>

<form role="form"
      method="POST"
      action="@Url.Action(MVC.SignUpUser.Index(null, null, null))"
      novalidate
      ng-app="sign-up-password-form"
      ng-controller="App.Security.SignUpUserForm.Controller"
      name="signUpUserForm"
      form-contrib="signUpUserCtrb"
      form-submitted="@IsPost"
      class="form-horizontal">

    @Html.AntiForgeryToken()

    <input type="hidden" name="returnUrl" value="@ViewBag.ReturnUrl" />

    @Html.ValidationSummary(true)
    @{
        const string inputCss = "input-lg";
        const string inputGroupCss = "input-group input-group-lg";
    }

    <p>
        By default, we have chosen the user name that @ViewBag.LoginProvider suggested. You have the option of choosing a different username below.<br />
        No matter which username you choose, you also be able to sign on using the email address below.<br />
        If you don't want to choose a different username now, you can do it after you sign in.
    </p>

    @* USERNAME INPUT *@
    <div class="form-group form-group-lg @Html.BootstrapValidationCssClassFor(x => x.UserName)"
         remove-class="has-success has-error"
         ng-class="signUpUserCtrb.userName.feedbackCssClass()">

        @* INPUT GROUP COLUMN *@
        <div class="col-md-6">
            @* LABEL *@
            <label for="@Html.IdFor(x => x.UserName)" class="control-label">
                @UserConstraints.NameLabel
            </label>
            <div class="@Html.CssClassWhenNotNullModel(inputGroupCss)"
                 remove-class="@inputGroupCss"
                 ng-class="signUpUserCtrb.userName.inputGroupCssClass('lg')">
                <input type="text"
                       class="form-control @inputCss"
                       placeholder="Enter @UserConstraints.NameLabel.ToLower() here"
                       id="@Html.IdFor(x => x.UserName)"
                       name="userName"
                       value="@(Html.ValueFor(x => x.UserName).ToString() != "" ? Html.ValueFor(x => x.UserName) : ViewBag.UserName)"
                       ng-init="vm.userName='@(Html.ValueFor(x => x.UserName).ToString() != "" ? Html.ValueForJavaScriptString(x => x.UserName) : ViewBag.UserName)'"
                       ng-model="vm.userName"
                       required
                       model-contrib
                       server-error="@Html.ValidationMessageTextFor(x => x.UserName)"
                       server-validate="@Url.Action(MVC.SignUpUser.Validate(null, "userName"))"
                       server-validate-data="{ token: vm.token }"
                       server-validate-throttle="400" />

                <span class="input-group-addon validation @Html.CssClassWhenNullModel("hide")"
                      remove-class="hide"
                      ng-class="vm.userNameInputGroupValidationAddOnCssClass()">
                    <i class="fa fa-fw fa-asterisk default" title="This is a required field"></i>
                    <i class="fa fa-fw fa-times error"></i>
                    <i class="fa fa-fw fa-spinner fa-spin spin-fast spinner"></i>
                    <i class="fa fa-fw fa-exclamation-triangle warning"></i>
                    <i class="fa fa-fw fa-check success"></i>
                </span>
            </div>
        </div>

        @* VALIDATION MESSAGES COLUMNS *@
        <div class="col-md-6 validation help-block help-block-horizontal-md under-label hidden-sm hidden-xs">
            <span tooltip="@Resources.notempty_error.Replace("{PropertyName}", UserConstraints.NameLabel)"
                  tooltip-toggle="vm.isUserNameRequiredError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span tooltip="{{ signUpUserCtrb.userName.error.server }}"
                  tooltip-toggle="vm.isUserNameServerError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span ng-class="{ hide: true }">@Html.ValidationMessageFor(x => x.UserName)</span>
        </div>
        <div class="col-md-6 validation help-block hidden-md hidden-lg">
            <span ng-show="vm.isUserNameRequiredError()" ng-cloak>
                @Resources.notempty_error.Replace("{PropertyName}", UserConstraints.NameLabel)
            </span>
            <span ng-show="vm.isUserNameServerError()" ng-cloak>
                {{ signUpUserCtrb.userName.error.server }}
            </span>
            <span ng-class="{ hide: true }">
                @Html.ValidationMessageFor(x => x.UserName)
            </span>
        </div>
    </div>

    @* EMAIL INPUT *@
    <div class="form-group form-group-lg @Html.BootstrapValidationCssClassFor(x => x.Token)"
         remove-class="has-success has-error"
         ng-class="signUpUserCtrb.token.feedbackCssClass()">

        @* INPUT GROUP COLUMN *@
        <div class="col-md-6">
            @* SR LABEL *@
            <label for="@Html.IdFor(x => x.Token)" class="control-label">
                @EmailAddress.Constraints.ValueLabel
            </label>
            <small>(You can't change this now, but you can add &amp; remove emails after you sign in)</small>
            <div class="@Html.CssClassWhenNotNullModel(inputGroupCss)"
                 remove-class="@inputGroupCss"
                 ng-class="signUpUserCtrb.token.inputGroupCssClass('lg')">
                <input type="text"
                       class="form-control @inputCss"
                       id="@Html.IdFor(x => x.Token)"
                       value="@ViewBag.EmailAddress"
                       disabled readonly="readonly" />
                <input type="hidden"
                       name="emailAddress"
                       value="@ViewBag.EmailAddress" />
                <input type="hidden"
                       name="token"
                       value="@ViewBag.Token"
                       ng-init="vm.token='@ViewBag.Token'"
                       ng-model="vm.token"
                       required
                       model-contrib
                       server-error="@Html.ValidationMessageTextFor(x => x.Token)"
                       server-validate="@Url.Action(MVC.SignUpUser.Validate(null, "token"))" />

                <span class="input-group-addon validation @Html.CssClassWhenNullModel("hide")"
                      remove-class="hide"
                      ng-class="vm.tokenInputGroupValidationAddOnCssClass()">
                    <i class="fa fa-fw fa-asterisk default" title="This is a required field"></i>
                    <i class="fa fa-fw fa-times error"></i>
                    <i class="fa fa-fw fa-spinner fa-spin spin-fast spinner"></i>
                    <i class="fa fa-fw fa-exclamation-triangle warning"></i>
                    <i class="fa fa-fw fa-check success"></i>
                </span>
            </div>
        </div>

        @* VALIDATION MESSAGES COLUMNS *@
        <div class="col-md-6 validation help-block help-block-horizontal-md under-label hidden-sm hidden-xs">
            <span tooltip="@Resources.notempty_error.Replace("{PropertyName}", EmailConfirmation.Constraints.Label)"
                  tooltip-toggle="vm.isTokenRequiredError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span tooltip="{{ signUpUserCtrb.token.error.server }}"
                  tooltip-toggle="vm.isTokenServerError()"
                  tooltip-animation="false"
                  tooltip-placement="right"
                  class="validation-tooltip"></span>

            <span ng-class="{ hide: true }">@Html.ValidationMessageFor(x => x.Token)</span>
        </div>
        <div class="col-md-6 validation help-block hidden-md hidden-lg">
            <span ng-show="vm.isTokenRequiredError()" ng-cloak>
                @Resources.notempty_error.Replace("{PropertyName}", EmailConfirmation.Constraints.Label)
            </span>
            <span ng-show="vm.isTokenServerError()" ng-cloak>
                {{ signUpUserCtrb.confirmPassword.error.server }}
            </span>
            <span ng-class="{ hide: true }">
                @Html.ValidationMessageFor(x => x.Token)
            </span>
        </div>
    </div>

    @* FORM SUBMIT BUTTON *@
    <div class="form-group">
        <div class="col-md-12">
            @{
                var buttonClass = ViewData.ModelState.IsValid ? null : "btn-danger";
                var readyClass = ViewData.ModelState.IsValid ? null : "hide";
                var errorClass = ViewData.ModelState.IsValid ? "hide" : null;
            }
            <button type="submit"
                    class="pull-left btn btn-primary btn-lg @buttonClass"
                    ng-class="vm.submitCssClass()"
                    ng-disabled="vm.isSubmitDisabled()"
                    remove-class="@buttonClass">
                <i class="fa fa-fw fa-sign-in @readyClass"
                   remove-class="@readyClass"
                   ng-show="vm.isSubmitReady()"></i>
                <i class="fa fa-fw fa-exclamation-triangle @errorClass"
                   remove-class="@errorClass"
                   ng-show="vm.isSubmitError()"></i>
                <i class="fa fa-fw fa-spinner fa-spin spin-fast"
                   ng-show="vm.isSubmitWaiting()" ng-cloak></i>
                Register &amp; sign in
            </button>
            <div class="has-error pull-left nudge-right @errorClass"
                 remove-class="@errorClass"
                 ng-show="vm.isSubmitError()">
                <div class="help-block">
                    Could not confirm email address due to above error(s).
                </div>
            </div>
        </div>
    </div>

</form>

@section scripts
{
    @*@{ Html.RenderPartial(MVC.Scripts.Views.Angular); }
        <script src="~/app/security/SignUpUserForm.js"></script>*@
}
