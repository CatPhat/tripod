//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Tripod.Ioc.EntityFramework.EntityDbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets6124ee80cf82b4ff73cb5f413c321d81f3a2b99c4593410e29af667b5d1df44e))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets6124ee80cf82b4ff73cb5f413c321d81f3a2b99c4593410e29af667b5d1df44e : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "6124ee80cf82b4ff73cb5f413c321d81f3a2b99c4593410e29af667b5d1df44e"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.ExceptionAudit")
            {
                return GetView0();
            }

            if (extentName == "EntityDbContext.ExceptionAudits")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.User")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.UserClaim")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.EmailAddress")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.LocalMembership")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.Permission")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.RemoteMembership")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.EmailVerification")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.EmailMessage")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.UserPermission")
            {
                return GetView10();
            }

            if (extentName == "EntityDbContext.Users")
            {
                return GetView11();
            }

            if (extentName == "EntityDbContext.UserClaims")
            {
                return GetView12();
            }

            if (extentName == "EntityDbContext.EmailAddresses")
            {
                return GetView13();
            }

            if (extentName == "EntityDbContext.LocalMemberships")
            {
                return GetView14();
            }

            if (extentName == "EntityDbContext.Permissions")
            {
                return GetView15();
            }

            if (extentName == "EntityDbContext.RemoteMemberships")
            {
                return GetView16();
            }

            if (extentName == "EntityDbContext.EmailVerifications")
            {
                return GetView17();
            }

            if (extentName == "EntityDbContext.EmailVerification_Message")
            {
                return GetView18();
            }

            if (extentName == "EntityDbContext.EmailMessages")
            {
                return GetView19();
            }

            if (extentName == "EntityDbContext.User_Permissions")
            {
                return GetView20();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ExceptionAudit.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ExceptionAudit
        [CodeFirstDatabaseSchema.ExceptionAudit](T1.ExceptionAudit_ErrorId, T1.ExceptionAudit_Application, T1.ExceptionAudit_Host, T1.ExceptionAudit_Type, T1.ExceptionAudit_Source, T1.ExceptionAudit_Message, T1.ExceptionAudit_User, T1.ExceptionAudit_StatusCode, T1.ExceptionAudit_TimeUtc, T1.ExceptionAudit_Sequence, T1.ExceptionAudit_AllXml)
    FROM (
        SELECT 
            T.Id AS ExceptionAudit_ErrorId, 
            T.Application AS ExceptionAudit_Application, 
            T.Host AS ExceptionAudit_Host, 
            T.Type AS ExceptionAudit_Type, 
            T.Source AS ExceptionAudit_Source, 
            T.Message AS ExceptionAudit_Message, 
            T.User AS ExceptionAudit_User, 
            T.StatusCode AS ExceptionAudit_StatusCode, 
            T.OnUtc AS ExceptionAudit_TimeUtc, 
            T.Sequence AS ExceptionAudit_Sequence, 
            T.Xml AS ExceptionAudit_AllXml, 
            True AS _from0
        FROM EntityDbContext.ExceptionAudits AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.ExceptionAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ExceptionAudits
        [Tripod.Ioc.EntityFramework.ExceptionAudit](T1.ExceptionAudit_Id, T1.ExceptionAudit_Application, T1.ExceptionAudit_Host, T1.ExceptionAudit_Type, T1.ExceptionAudit_Source, T1.ExceptionAudit_Message, T1.ExceptionAudit_User, T1.ExceptionAudit_StatusCode, T1.ExceptionAudit_OnUtc, T1.ExceptionAudit_Sequence, T1.ExceptionAudit_Xml)
    FROM (
        SELECT 
            T.ErrorId AS ExceptionAudit_Id, 
            T.Application AS ExceptionAudit_Application, 
            T.Host AS ExceptionAudit_Host, 
            T.Type AS ExceptionAudit_Type, 
            T.Source AS ExceptionAudit_Source, 
            T.Message AS ExceptionAudit_Message, 
            T.User AS ExceptionAudit_User, 
            T.StatusCode AS ExceptionAudit_StatusCode, 
            T.TimeUtc AS ExceptionAudit_OnUtc, 
            T.Sequence AS ExceptionAudit_Sequence, 
            T.AllXml AS ExceptionAudit_Xml, 
            True AS _from0
        FROM CodeFirstDatabase.ExceptionAudit AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [CodeFirstDatabaseSchema.User](T1.User_Id, T1.User_Name, T1.User_SecurityStamp)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.Name AS User_Name, 
            T.SecurityStamp AS User_SecurityStamp, 
            True AS _from0
        FROM EntityDbContext.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserClaim
        [CodeFirstDatabaseSchema.UserClaim](T1.UserClaim_Id, T1.UserClaim_UserId, T1.UserClaim_ClaimType, T1.UserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS UserClaim_Id, 
            T.UserId AS UserClaim_UserId, 
            T.ClaimType AS UserClaim_ClaimType, 
            T.ClaimValue AS UserClaim_ClaimValue, 
            True AS _from0
        FROM EntityDbContext.UserClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.EmailAddress.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmailAddress
        [CodeFirstDatabaseSchema.EmailAddress](T1.EmailAddress_Id, T1.EmailAddress_OwnerId, T1.EmailAddress_Value, T1.EmailAddress_HashedValue, T1.EmailAddress_IsPrimary, T1.EmailAddress_IsVerified)
    FROM (
        SELECT 
            T.Id AS EmailAddress_Id, 
            T.OwnerId AS EmailAddress_OwnerId, 
            T.[Value] AS EmailAddress_Value, 
            T.HashedValue AS EmailAddress_HashedValue, 
            T.IsPrimary AS EmailAddress_IsPrimary, 
            T.IsVerified AS EmailAddress_IsVerified, 
            True AS _from0
        FROM EntityDbContext.EmailAddresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.LocalMembership.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LocalMembership
        [CodeFirstDatabaseSchema.LocalMembership](T1.LocalMembership_UserId, T1.LocalMembership_PasswordHash)
    FROM (
        SELECT 
            T.Id AS LocalMembership_UserId, 
            T.PasswordHash AS LocalMembership_PasswordHash, 
            True AS _from0
        FROM EntityDbContext.LocalMemberships AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Permission.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Permission
        [CodeFirstDatabaseSchema.Permission](T1.Permission_Id, T1.Permission_Name, T1.Permission_Description)
    FROM (
        SELECT 
            T.Id AS Permission_Id, 
            T.Name AS Permission_Name, 
            T.Description AS Permission_Description, 
            True AS _from0
        FROM EntityDbContext.Permissions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RemoteMembership.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RemoteMembership
        [CodeFirstDatabaseSchema.RemoteMembership](T1.RemoteMembership_LoginProvider, T1.RemoteMembership_ProviderKey, T1.RemoteMembership_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS RemoteMembership_LoginProvider, 
            T.ProviderKey AS RemoteMembership_ProviderKey, 
            T.UserId AS RemoteMembership_UserId, 
            True AS _from0
        FROM EntityDbContext.RemoteMemberships AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.EmailVerification.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmailVerification
        [CodeFirstDatabaseSchema.EmailVerification](T3.EmailVerification_Id, T3.EmailVerification_OwnerId, T3.EmailVerification_Token, T3.EmailVerification_Ticket, T3.EmailVerification_Secret, T3.EmailVerification_ExpiresOnUtc, T3.EmailVerification_RedeemedOnUtc, T3.EmailVerification_Purpose, T3.EmailVerification_EmailMessageId)
    FROM (
        SELECT T1.EmailVerification_Id, T1.EmailVerification_OwnerId, T1.EmailVerification_Token, T1.EmailVerification_Ticket, T1.EmailVerification_Secret, T1.EmailVerification_ExpiresOnUtc, T1.EmailVerification_RedeemedOnUtc, T1.EmailVerification_Purpose, T2.EmailVerification_EmailMessageId, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS EmailVerification_Id, 
                T.OwnerId AS EmailVerification_OwnerId, 
                T.Token AS EmailVerification_Token, 
                T.Ticket AS EmailVerification_Ticket, 
                T.Secret AS EmailVerification_Secret, 
                T.ExpiresOnUtc AS EmailVerification_ExpiresOnUtc, 
                T.RedeemedOnUtc AS EmailVerification_RedeemedOnUtc, 
                CAST(T.Purpose AS [Edm.Int32]) AS EmailVerification_Purpose, 
                True AS _from0
            FROM EntityDbContext.EmailVerifications AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.EmailVerification_Message_Source).Id AS EmailVerification_Id, 
                Key(T.EmailVerification_Message_Target).Id AS EmailVerification_EmailMessageId, 
                True AS _from1
            FROM EntityDbContext.EmailVerification_Message AS T) AS T2
            ON T1.EmailVerification_Id = T2.EmailVerification_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.EmailMessage.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmailMessage
        [CodeFirstDatabaseSchema.EmailMessage](T1.EmailMessage_Id, T1.EmailMessage_OwnerId, T1.EmailMessage_From, T1.EmailMessage_Subject, T1.EmailMessage_Body, T1.EmailMessage_IsBodyHtml, T1.EmailMessage_SendOnUtc, T1.EmailMessage_SentOnUtc, T1.EmailMessage_CancelledOnUtc, T1.EmailMessage_LastSendError)
    FROM (
        SELECT 
            T.Id AS EmailMessage_Id, 
            T.OwnerId AS EmailMessage_OwnerId, 
            T.[From] AS EmailMessage_From, 
            T.Subject AS EmailMessage_Subject, 
            T.Body AS EmailMessage_Body, 
            T.IsBodyHtml AS EmailMessage_IsBodyHtml, 
            T.SendOnUtc AS EmailMessage_SendOnUtc, 
            T.SentOnUtc AS EmailMessage_SentOnUtc, 
            T.CancelledOnUtc AS EmailMessage_CancelledOnUtc, 
            T.LastSendError AS EmailMessage_LastSendError, 
            True AS _from0
        FROM EntityDbContext.EmailMessages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserPermission.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserPermission
        [CodeFirstDatabaseSchema.UserPermission](T1.UserPermission_UserId, T1.UserPermission_PermissionId)
    FROM (
        SELECT 
            Key(T.User_Permissions_Source).Id AS UserPermission_UserId, 
            Key(T.User_Permissions_Target).Id AS UserPermission_PermissionId, 
            True AS _from0
        FROM EntityDbContext.User_Permissions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [Tripod.Ioc.EntityFramework.User](T1.User_Id, T1.User_Name, T1.User_SecurityStamp)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.Name AS User_Name, 
            T.SecurityStamp AS User_SecurityStamp, 
            True AS _from0
        FROM CodeFirstDatabase.User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.UserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserClaims
        [Tripod.Ioc.EntityFramework.UserClaim](T1.UserClaim_Id, T1.UserClaim_UserId, T1.UserClaim_ClaimType, T1.UserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS UserClaim_Id, 
            T.UserId AS UserClaim_UserId, 
            T.ClaimType AS UserClaim_ClaimType, 
            T.ClaimValue AS UserClaim_ClaimValue, 
            True AS _from0
        FROM CodeFirstDatabase.UserClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.EmailAddresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmailAddresses
        [Tripod.Ioc.EntityFramework.EmailAddress](T1.EmailAddress_Id, T1.EmailAddress_OwnerId, T1.EmailAddress_Value, T1.EmailAddress_HashedValue, T1.EmailAddress_IsPrimary, T1.EmailAddress_IsVerified)
    FROM (
        SELECT 
            T.Id AS EmailAddress_Id, 
            T.OwnerId AS EmailAddress_OwnerId, 
            T.[Value] AS EmailAddress_Value, 
            T.HashedValue AS EmailAddress_HashedValue, 
            T.IsPrimary AS EmailAddress_IsPrimary, 
            T.IsVerified AS EmailAddress_IsVerified, 
            True AS _from0
        FROM CodeFirstDatabase.EmailAddress AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.LocalMemberships.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LocalMemberships
        [Tripod.Ioc.EntityFramework.LocalMembership](T1.LocalMembership_Id, T1.LocalMembership_PasswordHash)
    FROM (
        SELECT 
            T.UserId AS LocalMembership_Id, 
            T.PasswordHash AS LocalMembership_PasswordHash, 
            True AS _from0
        FROM CodeFirstDatabase.LocalMembership AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.Permissions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Permissions
        [Tripod.Ioc.EntityFramework.Permission](T1.Permission_Id, T1.Permission_Name, T1.Permission_Description)
    FROM (
        SELECT 
            T.Id AS Permission_Id, 
            T.Name AS Permission_Name, 
            T.Description AS Permission_Description, 
            True AS _from0
        FROM CodeFirstDatabase.Permission AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.RemoteMemberships.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RemoteMemberships
        [Tripod.Ioc.EntityFramework.RemoteMembership](T1.RemoteMembership_LoginProvider, T1.RemoteMembership_ProviderKey, T1.RemoteMembership_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS RemoteMembership_LoginProvider, 
            T.ProviderKey AS RemoteMembership_ProviderKey, 
            T.UserId AS RemoteMembership_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.RemoteMembership AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.EmailVerifications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmailVerifications
        [Tripod.Ioc.EntityFramework.EmailVerification](T1.EmailVerification_Id, T1.EmailVerification_OwnerId, T1.EmailVerification_Token, T1.EmailVerification_Ticket, T1.EmailVerification_Secret, T1.EmailVerification_ExpiresOnUtc, T1.EmailVerification_RedeemedOnUtc, T1.EmailVerification_Purpose) WITH 
        RELATIONSHIP(CREATEREF(EntityDbContext.EmailMessages, ROW(T1.[EmailVerification_Message.EmailVerification_Message_Target.Id]),[Tripod.Ioc.EntityFramework.EmailMessage]),[Tripod.Ioc.EntityFramework.EmailVerification_Message],EmailVerification_Message_Source,EmailVerification_Message_Target) 
    FROM (
        SELECT 
            T.Id AS EmailVerification_Id, 
            T.OwnerId AS EmailVerification_OwnerId, 
            T.Token AS EmailVerification_Token, 
            T.Ticket AS EmailVerification_Ticket, 
            T.Secret AS EmailVerification_Secret, 
            T.ExpiresOnUtc AS EmailVerification_ExpiresOnUtc, 
            T.RedeemedOnUtc AS EmailVerification_RedeemedOnUtc, 
            CAST(T.Purpose AS [Tripod.Ioc.EntityFramework.EmailVerificationPurpose]) AS EmailVerification_Purpose, 
            True AS _from0, 
            T.EmailMessageId AS [EmailVerification_Message.EmailVerification_Message_Target.Id]
        FROM CodeFirstDatabase.EmailVerification AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.EmailVerification_Message.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmailVerification_Message
        [Tripod.Ioc.EntityFramework.EmailVerification_Message](T3.[EmailVerification_Message.EmailVerification_Message_Target], T3.[EmailVerification_Message.EmailVerification_Message_Source])
    FROM (
        SELECT -- Constructing EmailVerification_Message_Target
            CreateRef(EntityDbContext.EmailMessages, row(T2.[EmailVerification_Message.EmailVerification_Message_Target.Id]), [Tripod.Ioc.EntityFramework.EmailMessage]) AS [EmailVerification_Message.EmailVerification_Message_Target], 
            T2.[EmailVerification_Message.EmailVerification_Message_Source]
        FROM (
            SELECT -- Constructing EmailVerification_Message_Source
                T1.[EmailVerification_Message.EmailVerification_Message_Target.Id], 
                CreateRef(EntityDbContext.EmailVerifications, row(T1.[EmailVerification_Message.EmailVerification_Message_Source.Id]), [Tripod.Ioc.EntityFramework.EmailVerification]) AS [EmailVerification_Message.EmailVerification_Message_Source]
            FROM (
                SELECT 
                    T.EmailMessageId AS [EmailVerification_Message.EmailVerification_Message_Target.Id], 
                    T.Id AS [EmailVerification_Message.EmailVerification_Message_Source.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.EmailVerification AS T
                WHERE T.EmailMessageId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.EmailMessages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmailMessages
        [Tripod.Ioc.EntityFramework.EmailMessage](T1.EmailMessage_Id, T1.EmailMessage_OwnerId, T1.EmailMessage_From, T1.EmailMessage_Subject, T1.EmailMessage_Body, T1.EmailMessage_IsBodyHtml, T1.EmailMessage_SendOnUtc, T1.EmailMessage_SentOnUtc, T1.EmailMessage_CancelledOnUtc, T1.EmailMessage_LastSendError)
    FROM (
        SELECT 
            T.Id AS EmailMessage_Id, 
            T.OwnerId AS EmailMessage_OwnerId, 
            T.[From] AS EmailMessage_From, 
            T.Subject AS EmailMessage_Subject, 
            T.Body AS EmailMessage_Body, 
            T.IsBodyHtml AS EmailMessage_IsBodyHtml, 
            T.SendOnUtc AS EmailMessage_SendOnUtc, 
            T.SentOnUtc AS EmailMessage_SentOnUtc, 
            T.CancelledOnUtc AS EmailMessage_CancelledOnUtc, 
            T.LastSendError AS EmailMessage_LastSendError, 
            True AS _from0
        FROM CodeFirstDatabase.EmailMessage AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EntityDbContext.User_Permissions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User_Permissions
        [Tripod.Ioc.EntityFramework.User_Permissions](T3.[User_Permissions.User_Permissions_Source], T3.[User_Permissions.User_Permissions_Target])
    FROM (
        SELECT -- Constructing User_Permissions_Source
            CreateRef(EntityDbContext.Users, row(T2.[User_Permissions.User_Permissions_Source.Id]), [Tripod.Ioc.EntityFramework.User]) AS [User_Permissions.User_Permissions_Source], 
            T2.[User_Permissions.User_Permissions_Target]
        FROM (
            SELECT -- Constructing User_Permissions_Target
                T1.[User_Permissions.User_Permissions_Source.Id], 
                CreateRef(EntityDbContext.Permissions, row(T1.[User_Permissions.User_Permissions_Target.Id]), [Tripod.Ioc.EntityFramework.Permission]) AS [User_Permissions.User_Permissions_Target]
            FROM (
                SELECT 
                    T.UserId AS [User_Permissions.User_Permissions_Source.Id], 
                    T.PermissionId AS [User_Permissions.User_Permissions_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.UserPermission AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
