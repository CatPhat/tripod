<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreditCardError" xml:space="preserve">
    <value>{PropertyName} is not a valid credit card number.</value>
  </data>
  <data name="email_error" xml:space="preserve">
    <value>'{PropertyValue}' is not a valid email address.</value>
  </data>
  <data name="equal_error" xml:space="preserve">
    <value>{PropertyName} should be equal to '{ComparisonValue}'.</value>
  </data>
  <data name="exact_length_error" xml:space="preserve">
    <value>{PropertyName} must be {MaxLength} characters in length. You entered {TotalLength} characters.</value>
  </data>
  <data name="exclusivebetween_error" xml:space="preserve">
    <value>{PropertyName} must be between {From} and {To} (exclusive). You entered {Value}.</value>
  </data>
  <data name="greaterthanorequal_error" xml:space="preserve">
    <value>{PropertyName} must be greater than or equal to '{ComparisonValue}'.</value>
  </data>
  <data name="greaterthan_error" xml:space="preserve">
    <value>{PropertyName} must be greater than '{ComparisonValue}'.</value>
  </data>
  <data name="inclusivebetween_error" xml:space="preserve">
    <value>{PropertyName} must be between {From} and {To}. You entered {Value}.</value>
  </data>
  <data name="length_error" xml:space="preserve">
    <value>{PropertyName} must be between {MinLength} and {MaxLength} characters. You entered {TotalLength} characters.</value>
  </data>
  <data name="lessthanorequal_error" xml:space="preserve">
    <value>{PropertyName} must be less than or equal to '{ComparisonValue}'.</value>
  </data>
  <data name="lessthan_error" xml:space="preserve">
    <value>{PropertyName} must be less than '{ComparisonValue}'.</value>
  </data>
  <data name="notempty_error" xml:space="preserve">
    <value>{PropertyName} is required.</value>
  </data>
  <data name="notequal_error" xml:space="preserve">
    <value>{PropertyName} should not be equal to '{ComparisonValue}'.</value>
  </data>
  <data name="notnull_error" xml:space="preserve">
    <value>{PropertyName} is required.</value>
  </data>
  <data name="predicate_error" xml:space="preserve">
    <value>The specified condition was not met for {PropertyName}.</value>
  </data>
  <data name="regex_error" xml:space="preserve">
    <value>{PropertyName} is not in the correct format.</value>
  </data>
  <data name="scale_precision_error" xml:space="preserve">
    <value>{PropertyName} may not be more than {expectedPrecision} digits in total, with allowance for {expectedScale} decimals. {digits} digits and {actualScale} decimals were found.</value>
  </data>
  <data name="Exception_ArgumentOutOfRange_CannotBeLessThan" xml:space="preserve">
    <value>Cannot be less than {0}.</value>
  </data>
  <data name="Validation_MinLength" xml:space="preserve">
    <value>{PropertyName} must contain at least {MinLength} characters. You entered {TotalLength} {Characters}.</value>
  </data>
  <data name="Exception_Argument_CannotBeNullOrEmpty" xml:space="preserve">
    <value>Value cannot be null or empty.</value>
  </data>
  <data name="Validation_MaxLength" xml:space="preserve">
    <value>{PropertyName} cannot exceed {MaxLength} characters. You entered {TotalLength} characters.</value>
  </data>
  <data name="Validation_AlreadyExists" xml:space="preserve">
    <value>{PropertyName} '{PropertyValue}' already exists.</value>
  </data>
  <data name="Exception_InvalidOperation_DoesNotExist" xml:space="preserve">
    <value>{0} '{1}' does not exist</value>
  </data>
  <data name="Validation_InvalidUsernameOrPassword" xml:space="preserve">
    <value>Invalid user name or password.</value>
  </data>
  <data name="Validation_NoUserByLoginProviderKey" xml:space="preserve">
    <value>There are no users with the given {PropertyName}.</value>
  </data>
  <data name="Validation_PasswordDoesNotEqualConfirmation" xml:space="preserve">
    <value>{PropertyName} does not match {PasswordLabel}.</value>
  </data>
  <data name="Validation_DoesNotExist" xml:space="preserve">
    <value>{PropertyName} '{PropertyValue}' does not exist.</value>
  </data>
  <data name="Validation_LocalMembershipByUser_AlreadyExists" xml:space="preserve">
    <value>{PropertyName} '{PropertyValue}' already has a {PasswordLabel}.</value>
  </data>
  <data name="Validation_CharacterLower" xml:space="preserve">
    <value>character</value>
  </data>
  <data name="Validation_CharactersLower" xml:space="preserve">
    <value>characters</value>
  </data>
  <data name="Validation_LocalMembershipByUser_DoesNotExist" xml:space="preserve">
    <value>{PropertyName} '{PropertyValue}' does not have a {PasswordLabel}.</value>
  </data>
  <data name="Validation_InvalidPassword" xml:space="preserve">
    <value>Invalid password.</value>
  </data>
  <data name="Validation_RemoteMembershipByUser_DoesNotExist" xml:space="preserve">
    <value>{PropertyName} '{PropertyValue}' does not own this '{ProviderName}' login.</value>
  </data>
  <data name="Validation_RemoteMembershipByUser_IsOnlyLogin" xml:space="preserve">
    <value>{PropertyName} '{PropertyValue}' does not have a {PasswordLabel} or any other external logins.</value>
  </data>
  <data name="Validation_SendVerificationEmail_IsExpectingEmail" xml:space="preserve">
    <value>Please acknowledge that you will expect a verification email to be sent to this {PropertyName}.</value>
  </data>
  <data name="Validation_CouldNotFind" xml:space="preserve">
    <value>Could not find {PropertyName} '{PropertyValue}'.</value>
  </data>
  <data name="Validation_EmailVerificationSecret_IsWrong" xml:space="preserve">
    <value>'{PropertyValue}' is not the correct {PropertyName}. Were you sent multiple emails?</value>
  </data>
  <data name="Validation_EmailVerificationTicket_IsExpired" xml:space="preserve">
    <value>This {PropertyName} has expired. Please start this process over to try again.</value>
  </data>
  <data name="Validation_EmailVerificationTicket_IsRedeemed" xml:space="preserve">
    <value>This {PropertyName} has already been used. Are you sure you haven't done this already?</value>
  </data>
  <data name="Validation_EmailVerificationTicket_IsWrongPurpose" xml:space="preserve">
    <value>This {PropertyName} cannot be used for this purpose.</value>
  </data>
  <data name="Validation_DoesNotExist_NoValue" xml:space="preserve">
    <value>{PropertyName} does not exist.</value>
  </data>
  <data name="Validation_EmailAddress_IsAlreadyVerified" xml:space="preserve">
    <value>The {PropertyName} '{PropertyValue}' has already been registered.</value>
  </data>
  <data name="Validation_EmailVerificationPurpose_IsEmpty" xml:space="preserve">
    <value>Unable to determine the purpose of this {PropertyName}.</value>
  </data>
  <data name="Validation_EmailVerification_MissingMessageFormatter" xml:space="preserve">
    <value>There is a missing message parameter.</value>
  </data>
  <data name="Validation_UserName_AllowedCharacters" xml:space="preserve">
    <value>{PropertyName} can only contain letters, numbers, and the following characters: @ . - _</value>
  </data>
  <data name="Validation_DoesNotExist_IntIdValue" xml:space="preserve">
    <value>{PropertyName} #{PropertyValue} does not exist.</value>
  </data>
  <data name="Validation_RemoteMembership_NoTicket" xml:space="preserve">
    <value>There is no external login information to process.</value>
  </data>
  <data name="Validation_NotAuthorized_UserAction" xml:space="preserve">
    <value>'{PropertyValue}' is not authorized to perform this action on {PropertyName} #{UserId}</value>
  </data>
  <data name="Validation_UserName_AllowedEmailAddress" xml:space="preserve">
    <value>You cannot use the email address '{PropertyValue}' for your {PropertyName}.</value>
  </data>
  <data name="Validation_EmailAddress_CannotDeletePrimary" xml:space="preserve">
    <value>You cannot delete your primary {PropertyName}.</value>
  </data>
  <data name="Validation_NotAuthorized_IntIdValue" xml:space="preserve">
    <value>You are not authorized to perform this action on {PropertyName} #{PropertyValue}.</value>
  </data>
</root>